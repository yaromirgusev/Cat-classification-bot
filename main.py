from PIL import Image
import torchvision.transforms as transforms
import timm
import torch
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
import ttoken
from aiogram import F
from aiogram.types import Message
from aiogram.enums import ParseMode
import os
from aiogram.utils.keyboard import InlineKeyboardBuilder
import psycopg2

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

listt = [(0,
  'Абиссинская кошка',
  'Активная и игривая, шерсть короткая и легкая в уходе, регулярное расчесывание предотвращает образование колтунов'),
 (1,
  'Американская короткошерстная кошка',
  'Здоровая и крепкая, требует минимального ухода за шерстью, любит физическую активность'),
 (2,
  'Американский бобтейл',
  "Имеет короткий 'помпон' на месте хвоста, любит игры и активность, требует регулярного расчесывания"),
 (3,
  'Американский керл',
  'Уникальные закрученные уши, требуют осмотра у ветеринара для проверки здоровья ушей, шерсть легка в уходе'),
 (4,
  'Балинезийская кошка',
  'Длинношерстная версия сиамской кошки, требует регулярного расчесывания, чтобы избежать спутывания шерсти'),
 (5,
  'Бамбино',
  'Порода с короткими лапами и мало шерсти, чувствительна к холоду и солнечному свету, требует защиты кожи'),
 (6,
  'Бенгальская кошка',
  'Энергичная и игривая, имеет гладкую шерсть с ярким рисунком, который легко поддерживать в чистоте'),
 (7,
  'Бирманская кошка',
  'Спокойная и дружелюбная, шерсть средней длины требует регулярного ухода'),
 (8,
  'Бомбейская кошка',
  'Кошка с черной гладкой шерстью, напоминает миниатюрную пантеру, уход за шерстью минимальный'),
 (9,
  'Британская длинношерстная кошка',
  'Похожа на короткошерстную, но требует чаще расчесывания из-за длинной шерсти'),
 (10,
  'Британская короткошерстная кошка',
  'Устойчивая и спокойная, шерсть требует небольшого ухода'),
 (11,
  'Бурманская кошка',
  'Общительная и любящая общество, короткая шерсть легко поддается уходу'),
 (12,
  'Бурмилла',
  'Дружелюбная и игривая, шерсть короткая с серебристым отливом, легка в уходе'),
 (13,
  'Гавана браун',
  'Редкая порода с шоколадной шерстью, любит внимание, шерсть требует регулярного расчесывания'),
 (14,
  'Гималайская кошка',
  'Похожа на персидскую с точечным окрасом, требует ежедневного расчесывания'),
 (15, 'Девон-рекс', 'Мало линяет, шерсть волнистая, требует защиты от холода'),
 (16,
  'Донской сфинкс',
  'Почти безволосая, требует частой ванны для поддержания чистоты кожи'),
 (17,
  'Европейская короткошерстная кошка',
  'Здоровая и простая в уходе, активная и игривая'),
 (18,
  'Египетская мау',
  'Одна из старейших пород, требует активного образа жизни и минимального ухода за шерстью'),
 (19,
  'Канадский сфинкс',
  'Требует регулярного мытья кожи, чувствителен к температурным перепадам'),
 (20,
  'Корат',
  'Любит игры и активный отдых, шерсть требует регулярного ухода, подходит для семей с детьми'),
 (21,
  'Корниш-рекс',
  'Игривая и ласковая, короткая шерсть не требует особого ухода'),
 (22,
  'Курильский бобтейл',
  'Обладает характерными короткими лапками, активна и любознательна, минимальный уход за шерстью'),
 (23,
  'Лаперм',
  'Имеет ярко выраженный рисунок и длинный пушистый хвост, требует регулярного расчесывания'),
 (24,
  'Манчкин',
  'Обладает густой шерстью, требует частого ухода и расчесывания, чувствительна к изменениям погоды'),
 (25,
  'Мейн-кун',
  'Крупная и мускулистая порода, требует пространства для игр и активности, шерсть требует регулярного расчесывания'),
 (26,
  'Меконгский бобтейл',
  'Имеет длинные лапы и короткий хвост, требует умеренного ухода за шерстью'),
 (27,
  'Мэнкс',
  'Безхвостая порода, требует внимания к специфике ухода за хвостом и шерстью'),
 (28,
  'Невская маскарадная кошка',
  'Имеет густую двойную шерсть, требует регулярного расчесывания, особенно в период линьки'),
 (29,
  'Немецкий рекс',
  'Короткошерстная порода, требует минимального ухода, активна и игрива'),
 (30,
  'Нибелунг',
  'Длинношерстная порода с пушистым хвостом, требует регулярного расчесывания'),
 (31,
  'Норвежская лесная кошка',
  'Короткошерстная порода, любит активные игры, шерсть не требует сложного ухода'),
 (32,
  'Ориентальная кошка',
  'Имеет тонкую шерсть, которая требует регулярного ухода и предотвращения спутываний'),
 (33,
  'Оцикет',
  'Короткошерстная порода с ярко выраженным рисунком, требует регулярного ухода'),
 (34,
  'Персидская кошка',
  'Кошка с плотной шерстью и дружелюбным характером, требует регулярного расчесывания'),
 (35,
  'Петерболд',
  'Имеет характерный рисунок, любит активные игры, требует минимального ухода за шерстью'),
 (36,
  'Пиксибоб',
  'Имеет пушистую шерсть, требует частого ухода и обращения, подходит для семей'),
 (37,
  'Рагамаффин',
  'Короткошерстная порода с гладкой шерстью, требует минимального ухода'),
 (38,
  'Русская голубая кошка',
  'Длинношерстная порода, требует регулярного расчесывания и ухода за шерстью'),
 (39,
  'Рэгдолл',
  'Крупная порода с диким рисунком шерсти, требует простора и активности'),
 (40,
  'Саванна (Ашера)',
  'Имеет густую шерсть, требует регулярного расчесывания, любит внимание'),
 (41,
  'Селкирк-рекс',
  'Короткошерстная, требует минимального ухода, активна и любознательна'),
 (42,
  'Сиамская кошка',
  'Имеет плотную шерсть, требует частого расчесывания, подходит для семей'),
 (43,
  'Сибирская кошка',
  'Маленькая порода с короткой шерстью, требует умеренного ухода'),
 (44,
  'Сингапурская кошка',
  'Уникальная порода с редким рисунком шерсти, требует внимательного ухода'),
 (45,
  'Скукум',
  'Длинношерстная порода с пушистым хвостом, требует регулярного расчесывания'),
 (46,
  'Сноу-шу',
  "Любит внимание и общение, шерсть средней длины требует регулярного ухода, известна своим уникальным 'сапожным' окрасом"),
 (47,
  'Сококе',
  'Очень редкая порода, активная и игривая, шерсть короткая и легкая в уходе'),
 (48,
  'Сомалийская кошка',
  'Похожа на длинношерстную абиссинскую кошку, требует регулярного расчесывания, очень игривая и энергичная'),
 (49,
  'Тайская кошка',
  'Имеет крепкое телосложение и голубые глаза, шерсть короткая, требует минимального ухода'),
 (50,
  'Тойгер',
  'Имеет уникальный окрас, похожий на тигра, требует умеренного ухода за шерстью, активная и дружелюбная'),
 (51,
  'Тонкинская кошка',
  'Элегантная, средней длины шерсть, требует регулярного ухода, известна своей общительностью'),
 (52,
  'Турецкая ангора',
  'Длинношерстная и очень элегантная, требует частого и тщательного ухода за шерстью'),
 (53,
  'Турецкий ван',
  'Уникальный водолюбивый характер, длинная водоотталкивающая шерсть, требует регулярного ухода'),
 (54,
  'Чаузи',
  'Гибрид домашней кошки и джунглекэта, требует активности и внимания, шерсть короткая и требует минимального ухода'),
 (55,
  'Шантильи-тиффани',
  'Средней длины шерсть, требует умеренного ухода, очень мягкая и пушистая'),
 (56,
  'Шартрез',
  'Одна из старейших естественных пород, шерсть короткая и густая, требует умеренного ухода'),
 (57,
  'Шотландская вислоухая кошка',
  'Известна своими складчатыми ушами, шерсть короткая, требует минимального ухода'),
 (58,
  'Шотландская прямоухая кошка',
  'Похожа на вислоухую, но с прямыми ушами, требует минимального ухода за шерстью'),
 (59,
  'Экзотическая кошка',
  'Похожа на персидскую, но с короткой шерстью, требует умеренного ухода'),
 (60,
  'Эльф',
  'Гибрид сфинкса и американского керла, почти безволосая, требует частой очистки кожи'),
 (61,
  'Японский бобтейл',
  "Имеет короткий 'помпон' на месте хвоста, активная и общительная, шерсть может быть как короткой, так и длинной, требует умеренного ухода")]

connection = None
try:
    connection = psycopg2.connect(
        host = ttoken.host,
        database = ttoken.db_name,
        user = ttoken.user,
        password =  ttoken.password)
    
    with connection.cursor() as cursor:
        cursor.execute('DROP TABLE IF EXISTS data;')
        connection.commit()

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS data(
            id SERIAL PRIMARY KEY, 
            names VARCHAR(255) NOT NULL, 
            descs VARCHAR(255) NOT NULL
        );
        ''')
        connection.commit() 

        insert_query = 'INSERT INTO data (id, names, descs) VALUES (%s, %s, %s);'
        cursor.executemany(insert_query, listt)
        connection.commit()

except Exception as e:
    print('Error:', e)

finally:
    if connection:
        connection.close()
        print('Database connection closed')




def predict_image(image_path, model, device):
    image = Image.open(image_path)
    transform = transforms.Compose([
        transforms.Resize((224, 224)),  
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  
    ])
    image_tensor = transform(image).unsqueeze(0)  
    
    image_tensor = image_tensor.to(device)

    with torch.no_grad():
        output = model(image_tensor)
        top1=-10000
        top2=-10000
        top3=-10000
        top1_i = 0
        top2_i = 0
        top3_i = 0
        for i, j in enumerate(output[0]):
            if j > top1:
                top1=j
                top1_i = i
            elif j > top2 and j < top1 :
                top2 = j
                top2_i = i
            elif j > top3 and j < top2:
                top3 = j
                top3_i = i

    return top1_i, top2_i, top3_i

model2 = torch.load('complete_model2_00001.pth', map_location=device)
model2.eval()

logging.basicConfig(level=logging.INFO)
bot = Bot(token=ttoken.token)
dp = Dispatcher()

@dp.message(F.photo)
async def download_photo(message: types.Message, bot: Bot):
    global results
    temp_dir = '/tmp' if os.name != 'nt' else './temp'
    os.makedirs(temp_dir, exist_ok=True)  
    destination = os.path.join(temp_dir, f"{message.photo[-1].file_id}.jpg")
    
    await bot.download(message.photo[-1], destination=destination)

    if os.path.exists(destination):
        prediction = predict_image(destination, model2, device)
        try:
            connection = psycopg2.connect(
                host = ttoken.host,
                database = ttoken.db_name,
                user = ttoken.user,
                password =  ttoken.password)
            
            with connection.cursor() as cursor:
                query = 'SELECT names, descs FROM data WHERE id IN %s;'
                cursor.execute(query, (prediction,))
            
                results = cursor.fetchall()
                

        except Exception as e:
            print('Error:', e)

        finally:
            if connection:
                connection.close()
                print('got names for preds')

        print(results)
        top1 = results[0][0]
        top2 = results[1][0]
        top3 = results[2][0]

        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
        text=top1,
        callback_data="top1")
    )

        builder.add(types.InlineKeyboardButton(
        text=top2,
        callback_data="top2")
    )

        builder.add(types.InlineKeyboardButton(
        text=top3,
        callback_data="top3")
    )
        await message.answer(f'Вероятнее всего, это <b>{top1.lower()}</b> или <b>{top2.lower()}</b> или <b>{top3.lower()}</b>',
                             parse_mode=ParseMode.HTML,
                             reply_markup=builder.as_markup())
    else:
        await message.answer("Не удалось загрузить изображение.")

    os.remove(destination)

@dp.callback_query(F.data == "top1")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer(results[0][1])
    await callback.answer()

@dp.callback_query(F.data == "top2")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer(results[1][1])
    await callback.answer()

@dp.callback_query(F.data == "top3")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer(results[2][1])
    await callback.answer()

@dp.message(F.text, Command("start"))
async def any_message(message: Message):
    await message.answer(
        "Привет! Я бот, который может распознать породу кота по фото! Просто отправь мне фото своего кота и я отгадаю его породу, а также могу вывести тебе небольшую сводку по основным особенностям этой породы", 
        parse_mode=ParseMode.HTML
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())